#FROM: imagen padre de donde viene en este caso es ubuntu
FROM ubuntu

#RUN: comando que quiero ejecutar
RUN apt-get update 

#no puede haber comandos interactivos porque todo es automatico
#RUN apt-get install -y python 

# && => permite ejecutar comandos uno atras de otro en la misma capa
# \ => permite decir que el comando siga la linea siguiente
#RUN echo 1.0 >> /etc/version && apt-get install -y git \
#    && apt-get install -y iputils-ping

#CMD: nos permite indicar el comando por defecto del contenedor, 
#solo vale el ultimo CMD colocado
#este se ejecuta en una shell, esto ejecuta el CMD como bash => /bin/bash
#CMD echo "Welcome to this container"

#este ejecuta el CMD como exec
#CMD ["echo","Welcome to this container"]

#este se va a ejecutar en modo shell
#CMD /bin/bash 

#CMD ["/bin/bash"]

#RUN mkdir /datos
#WORKDIR /datos
#RUN touch f1.txt
#WORKDIR /datos1
#RUN touch f2.txt

##COPY##
#COPY index.html .
#COPY app.log /datos

##ADD##
#ADD docs docs
#ADD f* /datos/

##ENV##
#ENV dir=/data dir1=/data1
#RUN mkdir $dir && mkdir $dir1

##ARG##
#ARG dir2
#RUN mkdir $dir2

##EXPOSE##
RUN apt-get install -y apache2
EXPOSE 80

##VOLUME##
ADD paginas /var/www/html
#crea un volumen basado en esta directiva, los volumenes se crean en el externo
VOLUME ["/var/www/html"]

CMD ["apache2ctl","-DFOREGROUND"]

#ADD entrypoint.sh /datos1

##CMD##
#CMD /datos1/entrypoint.sh


#ENTRYPOINT ["/bin/bash"]

#Le estamos pasando el comando que queremos que ejecute el contenedor, es decir ejecuta primero el df y otro 
#comando que se a√±ade al crear el contenedor lo enlaza con el que esta en el ENTRYPOINT, puede haber varios 
#pero solo vale el ultimo.
#ENTRYPOINT ["df"]


